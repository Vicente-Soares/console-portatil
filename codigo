#include <LedControl.h>     // controle do módulo matriz MAX7219


LedControl lc = LedControl(18, 15, 16, 1); 
unsigned  long delaytime=1000;

String scoreString;
int  score;
int hundreds;
String scoreStr;
String scoreArr[] = {"" ,"" ,""  };

/* micro switches for control */
 int pinLeft = 2;
 int pinRight =  3;
volatile unsigned long buttonPressed;
int buttonDelay = 150;  //handle  contact bounce

volatile bool gameOver = false;

/* "rythm" of the  game, im milliseconds */
int tick;
int tickCounter = 1;

/* timestamp  */
unsigned long now;

/* display */
int ship; /* Initial ship position  */
int columns[] = {0,0,0,0,0,0,0,0}; // 8 columns, every int is row 1-8.
int  randomInt;
const int botao1 = 3;
const int botao2 = 5;
const int botao3 = 10;
const int botao4 = 6;
int contador = 0;
int buttonState1 = 0;
int buttonState2 = 0;
int buttonState3 = 0;
int buttonState4 = 0;
unsigned char i;
 unsigned char j; 
int column = 1, row = random(8)+1; // define aleatóriamente em que ponto a bola deve começar
int directionX = 1, directionY = 1; //define que vai primeiro da esquerda para a direita
const byte pinPot = A5; // pino potenciômetro
int pinPotVal; // valor do potenciômetro
int velocidade = 300; // valor inicial para a velocidade
byte counter = 0; // contador
const byte mult = 10; // multipolicador

byte sad[] = {
B10011111,
B10111000,
B11011000,
B10011000,
B11111111,
B10011001,
B10011001,
B10011111
};
 
byte smile[] = {
B00111100,
B01000010,
B10100101,
B10000001,
B10100101,
B10011001,
B01000010,
B00111100

};

void setup(){
   gameOver = false;
  hundreds = 0;
  scoreArr[0] = "";
  scoreArr[1] = "";
  scoreArr[2]  = "";
  score = 0;
  tick = 300;
  tickCounter = 1;
  ship = 3;
  now = millis();
  buttonPressed = millis();
  randomSeed(analogRead(15));  // better random numbers

  for(int i = 0; i<8; i++)
    columns[i] = 0;
  
  // Debugging
  // Serial.begin(9600);
  // Serial.print(columns[0]);
  
  /*
   The MAX72XX is in power-saving mode on startup,
   we have to  do a wakeup call
   */
  lc.shutdown(0,false);
  /* Set the brightness  to a medium values */
  lc.setIntensity(0,1);
  /* and clear the display */
  lc.clearDisplay(0);

  pinMode(pinLeft, INPUT_PULLUP);
  pinMode(pinRight,  INPUT_PULLUP);

  /* attach button press to interrupts */
  attachInterrupt(digitalPinToInterrupt(pinLeft),  left, FALLING);
  attachInterrupt(digitalPinToInterrupt(pinRight), right, FALLING);

  pinMode(botao1,  INPUT_PULLUP);
   pinMode(botao2,  INPUT_PULLUP);
     pinMode(botao3,  INPUT_PULLUP);
      pinMode(botao4,  INPUT_PULLUP);
     Serial.begin(9600);
    lc.shutdown(0, false); //habilita o display
    lc.setIntensity(0, 8); //define o brilho como médio
    lc.clearDisplay(0);    //limpa o display
    randomSeed(analogRead(0)); //criar séries genuinamente aleatórias 
    newGame();   
} // end setup
void left()
{
  if(millis() - buttonPressed  > buttonDelay) // handle switch contact bounce
  {      Serial.print("botao2");

        if(ship != 0)
        ship--;
      else
        ship = 7;
    
      lc.clearDisplay(0);
      buttonPressed = millis();
  }

  // after game over, button press  will restart game
  if(gameOver == true){
  gameOver = false;
  setup();
  }
}

/**************************************************************
  *  handle right button press
 */
void right()
{
    if(millis() - buttonPressed  > buttonDelay) // handle switch contact bounce
    {
      Serial.print("botao1");
      if(ship != 7)
        ship++;
      else
        ship = 0;
      
      lc.clearDisplay(0);
       buttonPressed = millis();
    }

  // after game over, button press  will restart game
  if(gameOver == true){
  gameOver = false;
  setup();
  }   
}
void loop() {
 buttonState1 = digitalRead(botao1);
 buttonState2 = digitalRead(botao2);
 buttonState3 = digitalRead(botao3);
 buttonState4 = digitalRead(botao4);
  
  if ( buttonState1 == LOW) // ESCOLHE  O JOGO
  {
    do{
      if(millis() - now > tick){  //do every  tick

    // score is: how many ticks you survived
    score++;
  
    now = millis();

    if(tickCounter == 1){ //every 4th tick

       //  make game faster over time
       tick = tick/1.02;

      // randomly  choose column
      randomInt = random(0, 8);

      // if no asteroid  exists in column, create one in row 1.
      if(columns[randomInt] == 0){  
        columns[randomInt] = 1;
      }
    }

    if(tickCounter !=  4)
      tickCounter++;
     else
      tickCounter = 1;

    //  do for every column
    for(int i = 0; i<8; i++){
      
      if(columns[i]  == 10) // delete asteroids when out of display
        columns[i] = 0;
        
      if(columns[i] != 0) // make asteroids fall down
        columns[i]++;
    }

    lc.clearDisplay(0);
  }


  /* write to display */

  // ship
  lc.setLed(0, 7, ship, true);

  // asteroids
  for(int i  = 0; i<8; i++){
    if(columns[i] > 0)
      lc.setLed(0, columns[i]-2, i,  true);
      lc.setLed(0, columns[i]-3, i, true);
  }

  // detect collision  of ship with asteroid
  if(columns[ship] == 10 or columns[ship] == 9){
    lc.clearDisplay(0);

    // animate explosion
    for(int i = 0; i<4; i++){
      lc.setLed(0,7,ship+i,true);
      lc.setLed(0,7,ship-i,true);
      lc.setLed(0,7-i,ship+i,true);
      lc.setLed(0,7-i,ship-i,true);
      lc.setLed(0,7-1.5*i,ship,true);

      // explosion sound
      unsigned  long time = millis();
      int randomSound=1000;
      while(millis() - time  <= 250)  {  
        randomSound--;
        tone(9, random(randomSound, 1000));   // change the parameters of random() for different sound
      }

      lc.clearDisplay(0);
      noTone(9);
    }

    delay(500);

    /* display score */
   
    scoreStr = String(score);

    // get single digits from score  int
    scoreArr[0] = scoreStr.charAt(0);
    scoreArr[1] = scoreStr.charAt(1);
    scoreArr[2] = scoreStr.charAt(2);

    // matrix can only display up to  2 digits (up to 99)
    if(score < 100){
        for(int i = 0; i<2; i++){
          if(scoreArr[i] == "0")
            draw0(1+i*4);
          if(scoreArr[i]  == "1")
            draw1(1+i*4);
          if(scoreArr[i] == "2")
            draw2(1+i*4);
          if(scoreArr[i] == "3")
            draw3(1+i*4);
          if(scoreArr[i] == "4")
            draw4(1+i*4);
          if(scoreArr[i]  == "5")
            draw5(1+i*4);
          if(scoreArr[i] == "6")
            draw6(1+i*4);
          if(scoreArr[i] == "7")
            draw7(1+i*4);
          if(scoreArr[i] == "8")
            draw8(1+i*4);
          if(scoreArr[i]  == "9")
            draw9(1+i*4);
        }
          
        }
        // if score is > 100, display only last two digits of score
    else{

        for(int i = 1; i<3; i++){
          if(scoreArr[i] == "0")
            draw0(1+(i-1)*4);
          if(scoreArr[i] == "1")
            draw1(1+(i-1)*4);
          if(scoreArr[i]  == "2")
            draw2(1+(i-1)*4);
          if(scoreArr[i] == "3")
            draw3(1+(i-1)*4);
          if(scoreArr[i] == "4")
            draw4(1+(i-1)*4);
          if(scoreArr[i] == "5")
            draw5(1+(i-1)*4);
          if(scoreArr[i]  == "6")
            draw6(1+(i-1)*4);
          if(scoreArr[i] == "7")
            draw7(1+(i-1)*4);
          if(scoreArr[i] == "8")
            draw8(1+(i-1)*4);
          if(scoreArr[i] == "9")
            draw9(1+(i-1)*4);
        }
        // first digit of score ("hundreds") is displayed as dots: One dot for  every hundred.
        for(int i = 1; i<10; i++){
          if(scoreArr[0]  == String(i))
            hundreds = i;
        }
        for(int i = 1;  i <= hundreds; i++){
          lc.setLed(0,0,i-1,true);
          lc.setLed(0,1,i-1,true);
          delay(200);          
        }
        
    }
   gameOver  = true;
    while(gameOver == true){

          // do nothing but wait for  button press
      }
  }
    }while(contador<=1000);
  }
if ( buttonState2 == LOW) // ESCOLHE O JOGO
{
 Serial.print("botao 2");
  
}
if(  buttonState3 == LOW) // SELECIONA O JOGO
{   Serial.print("botao 3");
 do{
    pinPotVal = analogRead(pinPot);
    pinPotVal = map(pinPotVal, 950, 650, 1, 6);
    column += directionX;
    row += directionY;

    if(column == 6 && directionX == 1 && (pinPotVal == row || pinPotVal+1 == row || pinPotVal+2 == row)) directionX = -1;
    if(column == 0 && directionX == -1) directionX = 1;
    if(row == 7 && directionY == 1 ) directionY = -1;
    if(row == 0 && directionY == -1) directionY = 1;
    if(column == 7) gameover();

    lc.clearDisplay(0);                    //limpa tela para próxima quadro de animação
    lc.setLed(0, column, row, HIGH);
    lc.setLed(0, 7, pinPotVal, HIGH);
    lc.setLed(0, 7, pinPotVal+1, HIGH);
    lc.setLed(0, 7, pinPotVal+2, HIGH);

    if(!(counter % mult)) {velocidade -= 5; mult*mult;}
    delay(velocidade);

    counter++; 
 }while(contador<=1000); 
  
}
   
} //end loop
void draw1(int position){

    lc.setColumn(0,0+position,B00001000);
    lc.setColumn(0,1+position,B00011111);
  
}

void draw2(int position){

    lc.setColumn(0,0+position,B00010111);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00011101);  
}
void draw3(int position){

    lc.setColumn(0,0+position,B00010001);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00011111);  
}
void draw4(int position){

    lc.setColumn(0,0+position,B00011100);
    lc.setColumn(0,1+position,B00000100);
    lc.setColumn(0,2+position,B00011111);  
}
void draw5(int position){

    lc.setColumn(0,0+position,B00011101);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00010111);  
}
void draw6(int position){

    lc.setColumn(0,0+position,B00011111);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00010111);  
}
void draw7(int position){

    lc.setColumn(0,0+position,B00010000);
    lc.setColumn(0,1+position,B00010011);
    lc.setColumn(0,2+position,B00011100);  
}
void draw8(int position){

    lc.setColumn(0,0+position,B00011111);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00011111);  
}
void draw9(int position){

    lc.setColumn(0,0+position,B00011101);
    lc.setColumn(0,1+position,B00010101);
    lc.setColumn(0,2+position,B00011111);  
}

void draw0(int position){

    lc.setColumn(0,0+position,B00011111);
    lc.setColumn(0,1+position,B00010001);
    lc.setColumn(0,2+position,B00011111);  
}


void gameover() {  
  setSprite(sad); // exibe carinha triste
  delay(1500);
  lc.clearDisplay(0);
  newGame();
}

void newGame() {
  for(byte x=0; x<3; x++){
    lc.clearDisplay(0);
    delay(250);
       for(int y=0; y<8; y++){
          lc.setRow(0, y, 255);         
       }
       delay(250);    
  } //end for
    
  setSprite(smile); // exibe carinha com riso
  delay(1500);
  lc.clearDisplay(0);

  counter = 0;  //reinicia todos os valores
  velocidade = 300;
  column = 1;
  row = random(8)+1;  
  
} //end newGame

void setSprite(byte sprite[]){
    for(byte r = 0; r < 8; r++){
        lc.setRow(0, r, sprite[r]);
    }
} // end setSprite
